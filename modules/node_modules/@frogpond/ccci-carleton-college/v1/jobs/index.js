import {ONE_HOUR} from '@frogpond/ccc-lib'
import {cachedWpJsonFeed} from '@frogpond/ccci-carleton-college/v1/news'
import mem from 'mem'
import _jsdom from 'jsdom'
import getUrls from 'get-urls'
import pMap from 'p-map'
const {JSDOM} = _jsdom

const jobsUrl =
	'https://www.carleton.edu/student-employment/post-jobs/wp-json/wp/v2/posts'

const BOOLEAN_KEYS = [
	'Position available during term',
	'Position available during break',
]

const PARAGRAPHICAL_KEYS = ['Description']

export function fetchJob(resp) {
	const dom = new JSDOM(resp.content, {contentType: 'text/html'})

	let titleText = resp.title.trim()
	const offCampus = /^Off Campus/.test(titleText)
	if (offCampus) {
		titleText = titleText.replace(/^Off Campus: +/, '')
	}

	const details = dom.window.document.querySelectorAll('p')

	const detailMap = [...details].reduce((coll, listEl) => {
		let [key, ...value] = listEl.childNodes
		key = key ? key.textContent.replace(/:$/, '') : key

		if (BOOLEAN_KEYS.includes(key)) {
			value = true
		} else if (PARAGRAPHICAL_KEYS.includes(key)) {
			let paragraphs = [...listEl.querySelectorAll('p')]
			let content = paragraphs.length ? paragraphs : value
			value = content
				.map((el) => el.textContent)
				.join('\n\n')
				.trim()
		} else {
			value = value
				.map((el) => el.textContent)
				.join(' ')
				.trim()
		}
		coll.set(key, value)

		return coll
	}, new Map())

	const description = detailMap.get('Description') || ''
	const links = Array.from(getUrls(description))

	return {
		// id: id,
		title: titleText,
		offCampus: offCampus,
		department: detailMap.get('Department or Office'),
		dateOpen: detailMap.get('Date Open') || 'Unknown',
		duringTerm: Boolean(detailMap.get('Position available during term')),
		duringBreak: Boolean(detailMap.get('Position available during break')),
		description: description,
		links: links,
	}
}

async function _getAllJobs() {
	let resp = await cachedWpJsonFeed(jobsUrl)
	return pMap(resp, fetchJob, {concurrency: 4})
}

export const getJobs = mem(_getAllJobs, {maxAge: ONE_HOUR})

export async function jobs(ctx) {
	ctx.cacheControl(ONE_HOUR)

	ctx.body = await getJobs()
}
