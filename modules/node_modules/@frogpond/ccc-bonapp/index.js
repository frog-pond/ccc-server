import {get} from '@frogpond/ccc-lib'
import {JSDOM, VirtualConsole} from 'jsdom'
import {z} from 'zod'

async function getBonAppWebpage(url) {
	const virtualConsole = new VirtualConsole()
	virtualConsole.sendTo(console, {omitJSDOMErrors: true})
	virtualConsole.on('jsdomError', (err) => {
		let messagesToSkip = [
			'Uncaught [ReferenceError: wp is not defined]',
			'Uncaught [ReferenceError: jQuery is not defined]',
		]
		if (messagesToSkip.includes(err.message)) {
			return
		}
		console.error(err)
	})
	return JSDOM.fromURL(url, {
		runScripts: 'dangerously',
		virtualConsole,
	})
}

const CafeInfo = z.object({
	name: z.string(),
	address: z.string(),
	city: z.string(),
	state: z.string(),
	zip: z.string(),
	latitude: z.string(),
	longitude: z.string(),
	description: z.string(),
	message: z.string(),
	eod: z.string(),
	timezone: z.string(),
	menu_type: z.string(),
	menu_html: z.string(),
	weekly_schedule: z.string(),
	days: z.array(
		z.object({
			date: z.string().date(),
			status: z.union([z.literal('open'), z.literal('closed'), z.string()]),
			message: z.union([z.literal(false), z.string()]),
			dayparts: z.array(
				z.object({
					id: z.string(),
					starttime: z.string(),
					endtime: z.string(),
					message: z.string(),
					label: z.string(),
				}),
			),
		}),
	),
})

const BamcoCafeInfo = z.object({
	cafe: CafeInfo,
})

const zodYesNo = z.union([z.literal('Y'), z.literal('N')])

const BamcoPageContents = z.object({
	current_cafe: z.object({
		name: z.string(),
		id: z.unknown(),
	}),
	menu_items: z.record(z.object({id: z.unknown()})),
	cor_icons: z.record(
		z.object({
			allergen: z.unknown(),
			description: z.string(),
			id: z.unknown(),
			image: z.string().url(),
			is_filter: zodYesNo,
			label: z.string(),
			position: z.string(),
			show_name_ds: zodYesNo,
			slug: z.string(),
			sort: z.string(),
			type: z.string(),
		}),
	),
	dayparts: z.record(
		z.object({
			abbreviation: z.string(),
			endtime: z.string().regex(/\d\d:\d\d/),
			endtime_formatted: z.string(),
			id: z.unknown(),
			label: z.string(),
			message: z.union([z.literal(''), z.string()]),
			starttime: z.string().regex(/\d\d:\d\d/),
			starttime_formatted: z.string(),
			stations: z.array(z.unknown()), //[Object, Object, Object, Object, Object, Object, Object, Object](8)
			time_formatted: z.string(),
		}),
	),
})

/**
 * @param {string|URL} cafeUrl
 * @returns {Promise<BamcoCafeInfo>}
 */
export async function cafe(cafeUrl) {
	let today = new Date()
	let dom = await getBonAppWebpage(cafeUrl)
	let bamco = BamcoPageContents.parse(dom.window.Bamco)
	return BamcoCafeInfo.parse({
		cafe: {
			name: bamco.current_cafe.name,
			address: '',
			city: '',
			state: '',
			zip: '',
			latitude: '',
			longitude: '',
			description: '',
			message: '',
			eod: '',
			timezone: '',
			menu_type: '',
			menu_html: '',
			weekly_schedule: '',
			days: [
				{
					date: today.toISOString().split('T')[0],
					status: '',
					message: false,
					dayparts: Object.values(bamco.dayparts).map(
						({id, label, message, starttime, endtime}) => ({
							id,
							label,
							message,
							starttime,
							endtime,
						}),
					),
				},
			],
		},
	})
}

export async function nutrition(itemId) {
	let url = 'https://legacy.cafebonappetit.com/api/2/items'
	return get(url, {searchParams: {item: itemId}}).json()
}

export async function menu(cafeUrl) {
	let dom = await getBonAppWebpage(cafeUrl)
	console.log(dom.window.Bamco.dayparts)
	return dom.window.Bamco.dayparts
	// let days = dom.window.Bamco.dayparts.map((dayInfo) => {
	// 	// let info = Object.assign({}, dayInfo)
	// 	// info.cafe = info.cafes[cafeUrl]
	// 	// delete info.cafes
	// 	// return info
	// })
	// return Object.assign({}, resp.body, {days})
}
