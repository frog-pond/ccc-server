import {get, ONE_HOUR, parseHtml} from '@frogpond/ccc-lib'
import mem from 'mem'
import lodash from 'lodash'
import pMap from 'p-map'
const {sortBy, startCase} = lodash

/*
type ContactPersonType = {
	lastName: string,
	title: string,
	firstName: string,
	email: string,
}

type AdvisorType = {
	email: string,
	name: string,
}

type StudentOrgType = {
	meetings: string,
	contacts: ContactPersonType[],
	advisors: AdvisorType[],
	description: string,
	category: string,
	lastUpdated: string,
	website: string,
	name: string,
}
*/

export function cleanOrg(org) {
	// console.log(org)

	let name = org.name.trim()

	// let contacts = org.contacts.map(c =>
	// 	Object.assign({}, c, {
	// 		title: c.title.trim(),
	// 		firstName: c.firstName.trim(),
	// 		lastName: c.lastName.trim(),
	// 	}),
	// )

	let category = org.categories.join(', ')

	let meetingTime = org.regularMeetingTime || ''
	let meetingLocation = parseHtml(org.regularMeetingLocation || '')
	let meetings = `${meetingTime} ${meetingLocation}`.trim()

	let description = parseHtml(org.description)

	let website = (org.website || '').trim()
	if (website && !/^https?:\/\//.test(website)) {
		website = `http://${website}`
	}

	return {
		advisors: [],
		category,
		contacts: [],
		description,
		lastUpdated: '2000-01-01',
		meetings,
		name,
		website,
	}
}

const fetchOrg = (base) => async (org) =>
	(await get(`${base}/${org.uri}`, {json: true})).body

export async function presence(school) {
	let orgsUrl = `https://api.presence.io/${school}/v1/organizations`
	let resp = await get(orgsUrl, {json: true})

	let orgs = await pMap(resp.body, fetchOrg(orgsUrl), {concurrency: 8})

	let cleaned = orgs.map(cleanOrg)

	let sortableRegex = /^(St\.? Olaf(?: College)?|The) +/i
	let withSortableNames = cleaned.map((item) => {
		let sortableName = item.name.replace(sortableRegex, '').toLowerCase()

		return {
			...item,
			$sortableName: sortableName,
			$groupableName: startCase(sortableName)[0].toUpperCase(),
		}
	})

	return sortBy(withSortableNames, '$sortableName')
}
