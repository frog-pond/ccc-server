import {getCafe} from './index'

export const MenuItem = `
	type CorIcon {
		id: ID!
		label: String
		sort: Int
	}

	type Nutrition {
		kcal: Int
	}

	#type Option {}

	#type Monotony {}

	type MenuItem {
		id: ID!
		label: String
		description: String
		cor: [CorIcon]
		price: String
		sizes: [String]
		nutrition: Nutrition
		special: Boolean
		tier: Int
		rating: String
		connector: String
		#options: [Option]
		station: String
		substation: String
		#monotony: Monotony
	}
`

export const Cafe = `
	scalar HtmlString
	scalar TimeString24Hour
	scalar DateString

	"""
	A cafÃ©
	"""
	type Cafe @cacheControl(maxAge: 3600) {
		menu: [Menu]
		name: String
		address: String
		city: String
		state: String
		zip: String
		latitude: Float
		longitude: Float
		description: HtmlString
		message: HtmlString
		eod: TimeString24Hour
		timezone: String
		menuType: MenuTypeEnum
		menuHtml: HtmlString
		locationDetail: String
		weeklySchedule: HtmlString
		schedule: [CafeSchedule]
	}

	type CafeSchedule {
		date: DateString
		message: String
		status: CafeScheduleStatusEnum
		shifts: [CafeScheduleShift]
	}

	type CafeScheduleShift {
		id: ID!
		start: TimeString24Hour
		end: TimeString24Hour
		message: String
		label: String
		hide: Boolean
	}

	enum CafeScheduleStatusEnum {
		open
	}

	enum MenuTypeEnum {
		dynamic
	}
`

export const Menu = `
	type SubStation {
		id: ID!
		label: String
		sort: String
		items: [MenuItem]
	}

	type Station {
		id: ID!
		sort: String
		label: String
		price: String
		note: String
		items: [MenuItem]
	}

	type MenuPart {
		id: ID!
		start: String
		end: String
		label: String
		abbreviation: String
		stations: [Station]
	}

	type Menu @cacheControl(maxAge: 3600) {
		menu_id: ID!
		name: String!
		date: String!
		dayparts: [[MenuPart]]
	}
`

export const QueryExtension = `
	extend type Query {
		cafe(id: Int!): Cafe
		cafes(ids: [Int!]): [Cafe]
	}
`

export const typeDefs = [QueryExtension, Menu, MenuItem, Cafe]

const coerceCafeDays = day => ({
	date: day.date,
	status: day.status,
	message: day.message,
	shifts: day.dayparts.map(s => ({
		id: s.id,
		message: s.message,
		label: s.label,
		start: s.starttime,
		end: s.endtime,
		hide: s.hide === '1',
	})),
})

const extractCafeInfo = data => {
	let [cafeMenu, cafeInfo] = data
	let cafe = cafeInfo.cafe
	let menu = cafeMenu.days.map(menuDay => {
		let dayparts = menuDay.cafe.dayparts.map(parts =>
			parts.map(daypart =>
				Object.assign({}, daypart, {
					start: daypart.starttime,
					end: daypart.endtime,
					stations: daypart.stations.map(station =>
						Object.assign({}, station, {
							items: station.items.map(itemId => cafeMenu.items[itemId]),
						}),
					),
				}),
			),
		)
		return Object.assign({}, menuDay, {dayparts, date: menuDay.date})
	})

	return Object.assign({}, cafe, {
		menuType: cafe.menu_type,
		menuHtml: cafe.menu_html,
		locationDetail: cafe.location_detail,
		weeklySchedule: cafe.weekly_schedule,
		schedule: cafe.days.map(coerceCafeDays),
		menu: menu,
	})
}

export const resolvers = {
	cafe: (root, args) => getCafe(args.id).then(extractCafeInfo),
	cafes: (root, args) =>
		Promise.all(args.ids).map(id => getCafe(id).then(extractCafeInfo)),
}
