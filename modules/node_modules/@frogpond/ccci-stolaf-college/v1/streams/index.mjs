import {get, ONE_DAY} from '@frogpond/ccc-lib'
import mem from 'mem'
import moment from 'moment'
import titleCase from 'titlecase'
import toPairs from 'lodash/toPairs'
import groupBy from 'lodash/groupBy'

const GET = mem(get, {maxAge: ONE_DAY})

const CENTRAL_TZ = 'America/Winnipeg'
const date = moment.tz(CENTRAL_TZ)

export async function getStreams(streamClass, dateFrom, dateTo) {
	let params = {
		class: streamClass,
		sort: 'ascending',
		// eslint-disable-next-line camelcase
		date_from: dateFrom,
		// eslint-disable-next-line camelcase
		date_to: dateTo,
	}

	let url = 'https://www.stolaf.edu/multimedia/api/collection'
	const data = await GET(url, {json: true, query: params}).then(
		resp => resp.body,
	)
	const streams = data.results

	// force title-case on the stream types, to prevent not-actually-duplicate headings
	const processed = streams
		.filter(
			stream =>
				stream.category && stream.category.toLowerCase() !== 'athletics',
		)
		.map(stream => {
			const date = moment(stream.starttime, 'YYYY-MM-DD HH:mm')
			const group =
				stream.status && stream.status.toLowerCase() !== 'live'
					? date.format('dddd, MMMM Do')
					: 'Live'

			return {
				...stream,
				category: titleCase.toLaxTitleCase(stream.category),
				date: date,
				$groupBy: group,
			}
		})

	const grouped = groupBy(processed, j => j.$groupBy)
	const mapped = toPairs(grouped).map(([title, data]) => ({title, data}))

	return mapped
}

export async function upcoming(ctx) {
	const {to} = ctx.query
	const dateFrom = date.format('YYYY-MM-DD')
	const dateToDefault = date
		.clone()
		.add(2, 'month')
		.format('YYYY-MM-DD')

	const dateToSelected = moment.tz(to, CENTRAL_TZ).format('YYYY-MM-DD')
	const dateTo = to ? dateToSelected : dateToDefault

	ctx.body = await getStreams('current', dateFrom, dateTo)
}

export async function archived(ctx) {
	const {from} = ctx.query
	const dateTo = date.format('YYYY-MM-DD')
	const dateFromDefault = date
		.clone()
		.subtract(2, 'month')
		.format('YYYY-MM-DD')

	const dateFromSelected = moment.tz(from, CENTRAL_TZ).format('YYYY-MM-DD')
	const dateFrom = from ? dateFromSelected : dateFromDefault

	ctx.body = await getStreams('archived', dateFrom, dateTo)
}
