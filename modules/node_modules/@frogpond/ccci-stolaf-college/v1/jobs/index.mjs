import {get, ONE_DAY} from '@frogpond/ccc-lib'
import mem from 'mem'
import _jsdom from 'jsdom'
import getUrls from 'get-urls'

const {JSDOM} = _jsdom

export function cleanJob(job) {
	const title = JSDOM.fragment(job.title).textContent.trim()
	const office = JSDOM.fragment(job.office).textContent.trim()
	const type = JSDOM.fragment(job.type).textContent.trim()
	const goodForIncomingStudents = job.goodForIncomingStudents
	const openPositions = job.openPositions.trim()
	const year = job.year.trim()

	// these all need to retain their newlines
	const description = cleanTextBlock(
		JSDOM.fragment(job.description).textContent,
	)
	const comments = cleanTextBlock(JSDOM.fragment(job.comments).textContent)
	const skills = cleanTextBlock(JSDOM.fragment(job.skills).textContent)
	const howToApply = cleanTextBlock(JSDOM.fragment(job.howToApply).textContent)
	const timeline = cleanTextBlock(JSDOM.fragment(job.timeline).textContent)

	const hoursPerWeek = job.hoursPerWeek.trim()
	const lastModified = job.lastModified.trim()
	const contactEmail = fixupEmailFormat(job.contactEmail.trim())

	const contactFirstName = job.contactFirstName.trim()
	const contactLastName = job.contactLastName.trim()
	const contactName = `${contactFirstName} ${contactLastName}`

	const links = getLinksFromJob({description, comments, skills, howToApply})

	return {
		...job,
		title,
		description,
		office,
		type,
		comments,
		skills,
		hoursPerWeek,
		lastModified,
		contactEmail,
		contactFirstName,
		contactLastName,
		contactName,
		links,
		howToApply,
		goodForIncomingStudents,
		openPositions,
		year,
		timeline,
	}
}

function cleanTextBlock(text) {
	return text
		.trim()
		.replace(/\t/g, ' ')
		.replace(/ +/g, ' ')
}

export function getLinksFromJob({description, comments, skills, howToApply}) {
	// Clean up returns, newlines, tabs, and misc symbols...
	// ...and search for application links in the text
	return Array.from(
		new Set([
			...getUrls(description),
			...getUrls(comments),
			...getUrls(skills),
			...getUrls(howToApply),
		]),
	)
}

function fixupEmailFormat(email) {
	if (!/@/.test(email)) {
		// No @ in address ... e.g. smith
		return `${email}@stolaf.edu`
	} else if (/@$/.test(email)) {
		// @ at end ... e.g. smith@
		return `${email}stolaf.edu`
	} else {
		// Defined address ... e.g. smith@stolaf.edu
		return email
	}
}

async function _getJobs() {
	let url = 'https://www.stolaf.edu/apps/stuwork/index.cfm'
	let query = {fuseaction: 'getall', nostructure: '1'}

	let data = await get(url, {json: true, query}).then(resp => resp.body)

	let cleaned = data.map(cleanJob)

	return cleaned
}

export const getJobs = mem(_getJobs, {maxAge: ONE_DAY})

export async function jobs(ctx) {
	ctx.body = await getJobs()
}
