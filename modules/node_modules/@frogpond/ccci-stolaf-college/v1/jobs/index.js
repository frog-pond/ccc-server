import {get, ONE_DAY, parseHtml} from '@frogpond/ccc-lib'
import mem from 'mem'
import getUrls from 'get-urls'

export function cleanJob(job) {
	const title = parseHtml(job.title)
	const office = parseHtml(job.office)
	const hoursPerWeek = parseHtml(job.hoursPerWeek)
	const timeOfHours = parseHtml(job.timeOfHours)

	// these all need to retain their newlines
	const description = cleanTextBlock(job.description)
	const comments = cleanTextBlock(job.comments)
	const skills = cleanTextBlock(job.skills)
	const howToApply = cleanTextBlock(job.howToApply)
	const timeline = cleanTextBlock(job.timeline)

	const contactEmail = fixupEmailFormat(job.contactEmail)
	const contactPhone = fixupPhoneFormat(job.contactPhone)

	const contactFirstName = job.contactFirstName
	const contactLastName = job.contactLastName
	const contactName = `${contactFirstName} ${contactLastName}`.trim()

	const links = getLinksFromJob({description, comments, skills, howToApply})

	return {
		comments: comments,
		contactEmail: contactEmail,
		contactName: contactName,
		contactPhone: contactPhone,
		description: description,
		goodForIncomingStudents: job.goodForIncomingStudents,
		hoursPerWeek: hoursPerWeek,
		howToApply: howToApply,
		id: job.id,
		lastModified: job.lastModified,
		links: links,
		office: office,
		openPositions: job.openPositions,
		skills: skills,
		timeline: timeline,
		timeOfHours: timeOfHours,
		title: job.title,
		type: job.type,
		year: job.year,
	}
}

function cleanTextBlock(text) {
	return parseHtml(text).replace(/\t/g, ' ').trim()
}

export function getLinksFromJob({description, comments, skills, howToApply}) {
	// Clean up returns, newlines, tabs, and misc symbols...
	// ...and search for application links in the text
	return Array.from(
		new Set([
			...getUrls(description),
			...getUrls(comments),
			...getUrls(skills),
			...getUrls(howToApply),
		]),
	)
}

function fixupPhoneFormat(phoneNumber) {
	return phoneNumber.length === 4 ? `507-786-${phoneNumber}` : phoneNumber
}

function fixupEmailFormat(email) {
	if (!/@/.test(email)) {
		// No @ in address ... e.g. smith
		return `${email}@stolaf.edu`
	} else if (/@$/.test(email)) {
		// @ at end ... e.g. smith@
		return `${email}stolaf.edu`
	} else {
		// Defined address ... e.g. smith@stolaf.edu
		return email
	}
}

async function _getJobs() {
	let url = 'https://www.stolaf.edu/apps/stuwork/index.cfm'
	let query = {fuseaction: 'getall', nostructure: '1'}

	let data = await get(url, {json: true, query}).then((resp) => resp.body)

	let cleaned = data.map(cleanJob)

	return cleaned
}

export const getJobs = mem(_getJobs, {maxAge: ONE_DAY})

export async function jobs(ctx) {
	ctx.cacheControl(ONE_DAY)

	ctx.body = await getJobs()
}
