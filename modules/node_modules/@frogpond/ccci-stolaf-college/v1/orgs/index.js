import {get, ONE_HOUR} from '@frogpond/ccc-lib'
import mem from 'mem'
import lodash from 'lodash'
import _jsdom from 'jsdom'
const {sortBy, startCase} = lodash
const {JSDOM} = _jsdom

export function cleanOrg(org) {
	let name = org.name.trim()

	let advisors = org.advisors
		.map(c => Object.assign({}, c, {name: c.name.trim()}))
		.filter(c => c.name.length)

	let contacts = org.contacts.map(c =>
		Object.assign({}, c, {
			title: c.title.trim(),
			firstName: c.firstName.trim(),
			lastName: c.lastName.trim(),
		}),
	)

	let category = org.category.trim()
	let meetings = org.meetings.trim()
	let description = JSDOM.fragment(org.description).textContent.trim()
	let website = org.website.trim()
	if (website && !/^https?:\/\//.test(website)) {
		website = `http://${website}`
	}

	return {
		...org,
		name,
		advisors,
		contacts,
		category,
		meetings,
		description,
		website,
	}
}

async function _getOrgs() {
	let orgsUrl = 'https://www.stolaf.edu/orgs/list/index.cfm'
	let query = {fuseaction: 'getall', nostructure: '1'}
	let resp = await get(orgsUrl, {json: true, query})

	let cleaned = resp.body.map(cleanOrg)

	let sortableRegex = /^(St\.? Olaf(?: College)?|The) +/i
	let withSortableNames = cleaned.map(item => {
		let sortableName = item.name.replace(sortableRegex, '')

		return {
			...item,
			$sortableName: sortableName,
			$groupableName: startCase(sortableName)[0],
		}
	})

	return sortBy(withSortableNames, '$sortableName')
}

const CACHE_DURATION = ONE_HOUR * 6

export const getOrgs = mem(_getOrgs, {maxAge: CACHE_DURATION})

export async function orgs(ctx) {
	ctx.cacheControl(CACHE_DURATION)

	ctx.body = await getOrgs()
}
