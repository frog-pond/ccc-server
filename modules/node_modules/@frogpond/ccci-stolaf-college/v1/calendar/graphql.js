import flatten from 'lodash/flatten'
import sortBy from 'lodash/sortBy'
import * as calendars from './index'

export const Event = `
	scalar ISOString
	scalar URL

	type CalendarEventConfig {
		startTime: Boolean!
		endTime: Boolean!
		subtitle: String!
	}

	type ReasonCalendarEventMetadata {
		reasonId: ID!
	}

	"""
	CalendarEvent
	"""
	interface CalendarEvent {
		startTime: ISOString!
		endTime: ISOString!
		title: String!
		description: String!
		location: String
		isOngoing: Boolean!
		config: CalendarEventConfig
	}

	type GoogleCalendarEvent implements CalendarEvent {
		startTime: ISOString!
		endTime: ISOString!
		title: String!
		description: String!
		location: String
		isOngoing: Boolean!
		config: CalendarEventConfig
	}

	type ReasonCalendarEvent implements CalendarEvent {
		startTime: ISOString!
		endTime: ISOString!
		title: String!
		description: String!
		location: String
		isOngoing: Boolean!
		config: CalendarEventConfig
		metadata: ReasonCalendarEventMetadata
	}

	enum NamedCalendarName {
		STOLAF
		OLEVILLE
		NORTHFIELD
		KRLX
		KSTO
	}
`

export const QueryExtension = `
	extend type Query {
		googleCalendar(calendarId: String!): [GoogleCalendarEvent!]
		reasonCalendar(calendarUrl: URL!): [ReasonCalendarEvent!]
		calendar(name: NamedCalendarName!): [CalendarEvent!]
		calendars(names: [NamedCalendarName!]!): [CalendarEvent!]
	}
`

export const typeDefs = [QueryExtension, Event]

export const resolvers = {
	googleCalendar: (root, args) => calendars.getGoogleCalendar(args.calendarId),
	reasonCalendar: (root, args) => calendars.getReasonCalendar(args.calendarUrl),
	calendar: (root, args) => {
		let ctx = {}
		return calendars[args.name](ctx).then(() => ctx.body)
	},
	calendars: (root, args) => {
		return Promise.all(
			args.names
				.map(n => calendars[n])
				.map(f => {
					let ctx = {}
					return Promise.all([ctx, f(ctx)])
				}),
		).then(results => {
			let events = flatten(results.map(([ctx]) => ctx.body))
			let sorted = sortBy(events, ev => ev.startTime)
			return sorted
		})
	},
}

export const resolverMap = {
	CalendarEvent: {
		__resolveType(obj) {
			switch (obj.dataSource) {
				case 'reason':
					return 'ReasonCalendarEvent'
				case 'google':
					return 'GoogleCalendarEvent'
				default:
					return null
			}
		},
	},
	NamedCalendarName: {
		STOLAF: 'stolaf',
		OLEVILLE: 'oleville',
		NORTHFIELD: 'northfield',
		KRLX: 'krlx',
		KSTO: 'ksto',
	},
}
