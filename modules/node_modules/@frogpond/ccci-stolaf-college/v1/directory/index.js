import {get, ONE_HOUR} from '@frogpond/ccc-lib'
import mem from 'mem'
import * as entities from 'html-entities'

const prefixTitle = (prefix) => {
	return prefix.endsWith(':') ? prefix.slice(0, -1) : prefix
}

const officeHoursTitle = (officeHours) => {
	const content = officeHours.content || ''
	const label = officeHours.hrefLabel || ''

	return `${content} ${label}`
}

const descriptionText = (shortRoom, item) => {
	const description =
		shortRoom && item.title
			? `${shortRoom} â€¢ ${item.title}`
			: shortRoom
			? shortRoom
			: item.title

	return description && entities.decode(description)
}

const shortRoomText = (campusLocations) => {
	return campusLocations
		.map((loc) => `${loc.buildingabbr} ${loc.room}`.trim())
		.join(' / ')
}

async function _getSearchResults(q) {
	const query = {
		fuseaction: 'SearchResults',
		format: 'json',
		query: q,
	}

	const url = 'https://www.stolaf.edu/directory/index.cfm'
	const data = await get(url, {json: true, query}).then((resp) => resp.body)

	const processed = data.results.map((item) => {
		let {officeHours} = item
		let shortRoom = shortRoomText(item.campusLocations)

		let result = {
			...item,
			description: descriptionText(shortRoom, item),
		}

		if (officeHours) {
			result.officeHours = {
				...officeHours,
				description: officeHoursTitle(officeHours),
				title: prefixTitle(officeHours.prefix),
			}
		}

		return result
	})

	return processed
}

const getSearchResults = mem(_getSearchResults, {maxAge: ONE_HOUR})

export async function search(ctx) {
	ctx.cacheControl(ONE_HOUR)

	const {q} = ctx.request.query
	ctx.body = await getSearchResults(q)
}
