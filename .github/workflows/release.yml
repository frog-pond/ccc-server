name: Release Deployment

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: release
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Extract and verify version
        id: version
        run: |
          TAG="${{ github.event.release.tag_name }}"
          VERSION="${TAG#v}"
          echo "Release tag version: $VERSION"
          
          # Extract version from package.json
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "package.json version: $PACKAGE_VERSION"
          
          # Verify they match
          if [ "$VERSION" != "$PACKAGE_VERSION" ]; then
            echo "❌ Error: Release tag version ($VERSION) does not match package.json version ($PACKAGE_VERSION)"
            echo "Please ensure package.json version is updated before creating a release"
            exit 1
          fi
          
          echo "✅ Version verified: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Trigger server restart
        run: |
          echo "Triggering server restart..."
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.RESTART_TOKEN }}" \
            -f \
            ${{ secrets.SERVER_URL }}/restart
          echo "Restart command sent successfully"

      - name: Wait for server to restart
        run: |
          echo "Waiting 10 seconds for server to restart..."
          sleep 10

      - name: Verify deployment
        run: |
          EXPECTED_VERSION="${{ steps.version.outputs.version }}"
          echo "Expected version: $EXPECTED_VERSION"
          
          MAX_ATTEMPTS=24
          SLEEP_INTERVAL=5
          
          for i in $(seq 1 $MAX_ATTEMPTS); do
            echo "Attempt $i/$MAX_ATTEMPTS: Checking health endpoint..."
            
            # Fetch health endpoint
            RESPONSE=$(curl -s ${{ secrets.SERVER_URL }}/health || echo "")
            
            if [ -z "$RESPONSE" ]; then
              echo "⚠️  No response from server"
            else
              # Extract version from response
              ACTUAL_VERSION=$(echo "$RESPONSE" | jq -r '.version')
              echo "Server reported version: $ACTUAL_VERSION"
              
              if [ "$ACTUAL_VERSION" = "$EXPECTED_VERSION" ]; then
                echo "✅ Deployment verified: version $ACTUAL_VERSION matches expected $EXPECTED_VERSION"
                exit 0
              else
                echo "⚠️  Version mismatch: expected $EXPECTED_VERSION, got $ACTUAL_VERSION"
              fi
            fi
            
            if [ $i -lt $MAX_ATTEMPTS ]; then
              echo "Waiting ${SLEEP_INTERVAL}s before next attempt..."
              sleep $SLEEP_INTERVAL
            fi
          done
          
          echo "❌ Deployment verification failed after $((MAX_ATTEMPTS * SLEEP_INTERVAL))s"
          exit 1

      - name: Notify Telegram - Success
        if: success()
        run: |
          curl -X POST \
            -H "Content-Type: multipart/form-data" \
            -F chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -F text="✅ ccc-server ${{ github.event.release.tag_name }} deployed successfully" \
            https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage

      - name: Notify Telegram - Failure
        if: failure()
        run: |
          curl -X POST \
            -H "Content-Type: multipart/form-data" \
            -F chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -F text="❌ ccc-server ${{ github.event.release.tag_name }} deployment FAILED. Check GitHub Actions logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage
