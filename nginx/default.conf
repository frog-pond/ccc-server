# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

# If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
# server port the client connected to
map $http_x_forwarded_port $proxy_x_forwarded_port {
  default $http_x_forwarded_port;
  ''      $server_port;
}

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  '' close;
}

# Apply fix for very long server names
server_names_hash_bucket_size 128;

# Default dhparam
# ssl_dhparam /etc/nginx/dhparam/dhparam.pem;

# Set appropriate X-Forwarded-Ssl header
map $scheme $proxy_x_forwarded_ssl {
  default off;
  https on;
}

gzip_types
  text/plain
  text/css
  application/javascript
  application/json
  application/x-javascript
  text/xml
  application/xml
  application/xml+rss
  text/javascript;

log_format vhost '$host $remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent '
                 '"$http_referer" "$http_user_agent"';
access_log off;
resolver 127.0.0.11;

# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;
proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;

# carleton.api.frogpond.tech
upstream carleton.api.frogpond.tech {
  server carleton:3001;
}

server {
  server_name carleton.api.frogpond.tech;

  location / {
    proxy_pass http://carleton.api.frogpond.tech;
  }

  listen 80;
  listen [::]:80;

  listen 443 ssl http2;
  listen [::]:443 ssl http2;

  access_log /var/log/nginx/access.log vhost;

  include "/etc/nginx/conf.d/ciphers/moz-modern.conf";
  include "/etc/nginx/conf.d/ssl/api-frogpond-tech.conf";
}

# stolaf.api.frogpond.tech
upstream stolaf.api.frogpond.tech {
  server stolaf:3001;
}

server {
  server_name stolaf.api.frogpond.tech;

  location / {
    proxy_pass http://stolaf.api.frogpond.tech;
  }

  listen 80;
  listen [::]:80;

  listen 443 ssl http2;
  listen [::]:443 ssl http2;

  access_log /var/log/nginx/access.log vhost;

  include "/etc/nginx/conf.d/ciphers/moz-intermediate.conf";
  include "/etc/nginx/conf.d/ssl/api-frogpond-tech.conf";
}

server {
  listen 80 default_server;
  listen [::]:80 default_server;

  # listen 443 ssl http2 default_server;
  # listen [::]:443 ssl http2 default_server;
  access_log /var/log/nginx/access.log vhost;

  server_name _; # This is just an invalid value which will never trigger on a real hostname.
  server_name_in_redirect off;

  location ~ / {
    deny all;
  }
}
